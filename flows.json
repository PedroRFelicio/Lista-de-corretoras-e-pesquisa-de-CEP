[
    {
        "id": "513682ee897229a5",
        "type": "http in",
        "z": "f7f4abbdda900c73",
        "name": "",
        "url": "/corretoras",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "b536be28c783ac01"
            ]
        ]
    },
    {
        "id": "b536be28c783ac01",
        "type": "http request",
        "z": "f7f4abbdda900c73",
        "name": "requisição corretora",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://brasilapi.com.br/api/cvm/corretoras/v1",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 400,
        "y": 120,
        "wires": [
            [
                "6bb271e653dc0b3f"
            ]
        ]
    },
    {
        "id": "6bb271e653dc0b3f",
        "type": "function",
        "z": "f7f4abbdda900c73",
        "name": "formatação corretora",
        "func": "const formattedBrokers = msg.payload.map(broker => {\n    if (!broker.nome_comercial || !broker.municipio || !broker.cnpj) {\n        return \"Informações incompletas\";\n    }\n\n    return `${broker.nome_comercial} - ${broker.municipio} / ${broker.cnpj}`;\n});\n\nmsg.payload = formattedBrokers;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 120,
        "wires": [
            [
                "4292b161f9af8a2b"
            ]
        ]
    },
    {
        "id": "4292b161f9af8a2b",
        "type": "template",
        "z": "f7f4abbdda900c73",
        "name": "modelo corretora",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"pt-BR\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Catálogo de Corretoras</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 0;\n            padding: 20px;\n            background-color: #f4f4f4;\n        }\n        h1 {\n            color: #333;\n            text-align: center;\n        }\n        ul {\n            list-style-type: none;\n            padding: 0;\n        }\n        li {\n            background-color: #fff;\n            margin-bottom: 10px;\n            padding: 10px;\n            border-radius: 5px;\n            box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n        }\n    </style>\n</head>\n<body>\n    <h1>Catálogo de Corretoras</h1>\n    <ul>\n        {{#payload}}\n        <li>{{.}}</li>\n        {{/payload}}\n    </ul>\n</body>\n</html>",
        "output": "str",
        "x": 910,
        "y": 120,
        "wires": [
            [
                "36948e571467c17e"
            ]
        ]
    },
    {
        "id": "36948e571467c17e",
        "type": "http response",
        "z": "f7f4abbdda900c73",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1110,
        "y": 120,
        "wires": []
    },
    {
        "id": "c2d0f28aae6a8b88",
        "type": "http in",
        "z": "f7f4abbdda900c73",
        "name": "",
        "url": "/cep/:cep/",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 220,
        "wires": [
            [
                "8b5513fc475cb4bc"
            ]
        ]
    },
    {
        "id": "f476da2b19acaac0",
        "type": "http request",
        "z": "f7f4abbdda900c73",
        "name": "cep requisição op1",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "body",
        "url": "https://brasilapi.com.br/api/cep/v2/{{{req.params.cep}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 220,
        "wires": [
            [
                "ead0d9471fc92031"
            ]
        ]
    },
    {
        "id": "f817e442d2b08db3",
        "type": "http response",
        "z": "f7f4abbdda900c73",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 970,
        "y": 220,
        "wires": []
    },
    {
        "id": "8b5513fc475cb4bc",
        "type": "change",
        "z": "f7f4abbdda900c73",
        "name": "CEPs",
        "rules": [
            {
                "t": "set",
                "p": "payload.cep",
                "pt": "msg",
                "to": "req.params.cep",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 220,
        "wires": [
            [
                "f476da2b19acaac0"
            ]
        ]
    },
    {
        "id": "ead0d9471fc92031",
        "type": "template",
        "z": "f7f4abbdda900c73",
        "name": "modelo cep op1",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"pt-BR\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Detalhes do CEP</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        #result {\n            margin-top: 20px;\n            border: 1px solid #ccc;\n            padding: 15px;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Detalhes do CEP</h1>\n    <div id=\"result\"></div>\n\n    <script>\n        async function fetchZipCodeDetails(cep) {\n            try {\n                console.log(`Fetching details for CEP: ${cep}`); // Debug log\n                const response = await fetch(`https://brasilapi.com.br/api/cep/v2/${cep}`);\n                console.log(`Response status: ${response.status}`); // Debug log\n                if (!response.ok) {\n                    throw new Error('CEP não encontrado');\n                }\n                const data = await response.json();\n                document.getElementById('result').innerHTML = `\n                    <h3>Detalhes para o CEP: ${data.cep}</h3>\n                    <p><strong>Rua:</strong> ${data.street}</p>\n                    <p><strong>Bairro:</strong> ${data.neighborhood}</p>\n                    <p><strong>Cidade:</strong> ${data.city}</p>\n                    <p><strong>Estado:</strong> ${data.state}</p>\n\n                `;\n            } catch (error) {\n                document.getElementById('result').innerHTML = `\n                    <h3>Error</h3>\n                    <p>${error.message}</p>\n                `;\n            }\n        }\n\n        const pathArray = window.location.pathname.split('/');\n        const cep = pathArray[pathArray.length - 1]; // Get the last part of the URL path\n\n        if (cep) {\n            fetchZipCodeDetails(cep);\n        } else {\n            document.getElementById('result').innerHTML = `\n                <h3>Error</h3>\n                <p>Nenhum CEP fornecido na URL.</p>\n            `;\n        }\n    </script>\n</body>\n</html>\n",
        "output": "str",
        "x": 780,
        "y": 220,
        "wires": [
            [
                "f817e442d2b08db3"
            ]
        ]
    },
    {
        "id": "271146b4f238d283",
        "type": "http in",
        "z": "f7f4abbdda900c73",
        "name": "",
        "url": "/buscar-cep",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 320,
        "wires": [
            [
                "96ed828bf40f759c"
            ]
        ]
    },
    {
        "id": "96ed828bf40f759c",
        "type": "template",
        "z": "f7f4abbdda900c73",
        "name": "buscar cep op2",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"pt-BR\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Busca de CEP</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 0;\n            padding: 20px;\n            background-color: #f4f4f4;\n        }\n        h1 {\n            color: #333;\n            text-align: center;\n        }\n        form {\n            background-color: #fff;\n            max-width: 400px;\n            margin: 20px auto;\n            padding: 20px;\n            border-radius: 5px;\n            box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n        }\n        input[type=\"text\"] {\n            width: 95%;\n            padding: 10px;\n            margin-bottom: 10px;\n            margin-right:10px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n        }\n        input[type=\"submit\"] {\n            width: 100%;\n            padding: 10px;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        input[type=\"submit\"]:hover {\n            background-color: #45a049;\n        }\n        #resultado {\n            background-color: #fff;\n            max-width: 400px;\n            margin: 20px auto;\n            padding: 20px;\n            border-radius: 5px;\n            box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n        }\n    </style>\n</head>\n<body>\n    <h1>Busca de CEP</h1>\n    <form id=\"cepForm\">\n        <input type=\"text\" name=\"cep\" placeholder=\"Digite o CEP\" required pattern=\"\\d{8}\">\n        <input type=\"submit\" value=\"Buscar\">\n    </form>\n    <div id=\"resultado\"></div>\n\n    <script>\n    document.getElementById('cepForm').addEventListener('submit', function(e) {\n        e.preventDefault();\n        var cep = this.elements.cep.value;\n        fetch('/processar-cep', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({cep: cep})\n        })\n        .then(response => response.text())\n        .then(data => {\n            document.getElementById('resultado').innerHTML = data;\n        })\n        .catch((error) => {\n            console.error('Error:', error);\n            document.getElementById('resultado').innerHTML = '<p>Erro ao buscar CEP. Tente novamente.</p>';\n        });\n    });\n    </script>\n</body>\n</html>",
        "output": "str",
        "x": 380,
        "y": 320,
        "wires": [
            [
                "57d45b650e38ac88"
            ]
        ]
    },
    {
        "id": "d0b3d013df038716",
        "type": "http in",
        "z": "f7f4abbdda900c73",
        "name": "",
        "url": "/processar-cep",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 420,
        "wires": [
            [
                "fa2e903b797bd160"
            ]
        ]
    },
    {
        "id": "57d45b650e38ac88",
        "type": "http response",
        "z": "f7f4abbdda900c73",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 570,
        "y": 320,
        "wires": []
    },
    {
        "id": "4bcd223b826d5895",
        "type": "http request",
        "z": "f7f4abbdda900c73",
        "name": "cep requisição op2",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://brasilapi.com.br/api/cep/v2/{{payload.cep}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 420,
        "wires": [
            [
                "01fb1b75f73cd047"
            ]
        ]
    },
    {
        "id": "01fb1b75f73cd047",
        "type": "function",
        "z": "f7f4abbdda900c73",
        "name": "formatação cep 2",
        "func": "if (msg.statusCode === 200 && msg.payload) {\n        const cepData = msg.payload;\n        msg.payload = {\n            cep: cepData.cep,\n            estado: cepData.state,\n            cidade: cepData.city,\n            bairro: cepData.neighborhood,\n            rua: cepData.street,\n            latitude: cepData.location?.coordinates?.latitude,\n            longitude: cepData.location?.coordinates?.longitude\n        };\n    } else {\n        msg.payload = {\n            erro: \"CEP não encontrado\"\n        };\n    }\n    return msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 420,
        "wires": [
            [
                "3b376141647f0dca"
            ]
        ]
    },
    {
        "id": "3b376141647f0dca",
        "type": "template",
        "z": "f7f4abbdda900c73",
        "name": "modelo cep op2",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"pt-BR\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Resultado da Busca de CEP</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 0;\n            padding: 20px;\n            background-color: #f4f4f4;\n        }\n        h1 {\n            color: #333;\n            text-align: center;\n        }\n        .result {\n            background-color: #fff;\n            max-width: 500px;\n            margin: 20px auto;\n            padding: 20px;\n            border-radius: 5px;\n            box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n        }\n        .error {\n            color: red;\n            font-weight: bold;\n        }\n        a {\n            display: block;\n            text-align: center;\n            margin-top: 20px;\n            color: #4CAF50;\n            text-decoration: none;\n        }\n        a:hover {\n            text-decoration: underline;\n        }\n    </style>\n</head>\n<body>\n    <h1>Resultado da Busca de CEP</h1>\n    <div class=\"result\">\n        {{#payload.erro}}\n            <p class=\"error\">{{payload.erro}}</p>\n        {{/payload.erro}}\n        {{^payload.erro}}\n            <p><strong>CEP:</strong> {{payload.cep}}</p>\n            <p><strong>Estado:</strong> {{payload.estado}}</p>\n            <p><strong>Cidade:</strong> {{payload.cidade}}</p>\n            <p><strong>Bairro:</strong> {{payload.bairro}}</p>\n            <p><strong>Rua:</strong> {{payload.rua}}</p>\n            {{#payload.latitude}}\n                <p><strong>Latitude:</strong> {{payload.latitude}}</p>\n            {{/payload.latitude}}\n            {{#payload.longitude}}\n                <p><strong>Longitude:</strong> {{payload.longitude}}</p>\n            {{/payload.longitude}}\n        {{/payload.erro}}\n    </div>\n</body>\n</html>",
        "output": "str",
        "x": 1080,
        "y": 420,
        "wires": [
            [
                "0caa17680a0ba625"
            ]
        ]
    },
    {
        "id": "0caa17680a0ba625",
        "type": "http response",
        "z": "f7f4abbdda900c73",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1270,
        "y": 420,
        "wires": []
    },
    {
        "id": "fa2e903b797bd160",
        "type": "function",
        "z": "f7f4abbdda900c73",
        "name": "puxar cep",
        "func": "if (msg.payload && msg.payload.cep) {\n        msg.cep = msg.payload.cep;\n    }\n    return msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 420,
        "wires": [
            [
                "4bcd223b826d5895"
            ]
        ]
    }
]